@model ChecksAndBalances.Data.Models.Article

@{
    ViewBag.Title = "Checks & Balances | Admin | Publishing";
    Layout = "~/Views/Shared/_Layout.cshtml";
  
}

@section header {
    <link href="http://cdn.aloha-editor.org/latest/css/aloha.css" rel="stylesheet" type="text/css" />
    <style type="text/css">
        .state-dropdown { margin-bottom: 0px; width: 89%; display: inline; }
        .box1 { margin-bottom: 10px; }
        .float-right { float: right }
        .hover { border: 2px solid yellow !important; }
        img.small { width: 200px !important; height: 200px !important; }
        textarea.description { width: 450px !important; height: 146px !important; }
        input[type="text"].title { width: 100% !important; }
    </style>
}

@section sectionTitle {
    <section class="title">
        <div class="container">
            <h1><span>Edit your article</span></h1>
        </div>
    </section>
}

<section id="content" class="container">
    <div id="primary" class="columns three-fourths first">
        <div class="post-entry">
            <div class="post-head columns nine first">
                <h4 class="post-title columns eight">
                    <input class="title" type="text" data-bind="value: Title" placeholder="Title goes here..." />
                </h4>
                <ul class="post-meta">
                    <li class="data">Publish Date</li>
                    <li class="author"><input type="text" data-bind="value: Authors" placeholder="Authors" style="display: inline;" /></li>
                    <li class="cat" data-bind="foreach: Tags">
                        <a href="#" data-bind="text: Name"></a> 
                        <span>, </span>
                    </li>
                    <li class="comments"># of comments..</li>
                </ul>
                <div class="post-media2">
                    <img class="small" id="dragImage" data-bind="attr: { src: ImageUrl }, draganddrop: ImageUrl" alt="Drag Image here..." />
                </div>

                <div class="post-content">
                    <textarea class="description" cols="20" rows="5" data-bind="value: Description" placeholder="Synapse of article goes here."></textarea>
                </div>
                <hr class="divider1" />

                <div class="post-content">
                    <div class="row editable">
                        @if (!String.IsNullOrEmpty(Model.Content))
                        {
                            @Html.Raw(Model.Content)
                        }
                        else
                        {
                            <p>Content goes here</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <hr class="divider1" />

         <div class="text-center add-top">
             <a href="#" data-bind="click: save" class="button large">Save</a>
             <a href="#" data-bind="click: publish" class="button large">Publish</a>
        </div>
    </div>
    <div id="secondary" class="columns one-fourth">
        <div class="widget">
            <h4>States</h4>
            <div class="widget-list">
                <ul data-bind="foreach: States">
                    <li>
                        <span class="box1">
                            <select class="state-dropdown" data-bind="options: $parent.SelectStates, optionsText: 'Text', optionsValue: 'Value', optionsCaption: '<Please Select>', value: StateId"></select>
                            <a class="float-right" href="#" data-bind="click: $parent.removeState">
                                <span class="icon-remove"></span>
                            </a>
                        </span>

                    </li>
                </ul>
                <a href="#" data-bind="click: addState" class="button">Add</a>
            </div>
        </div>

        <div class="widget">
            <h4>Tags</h4>
            <div class="widget-list">
                <ul data-bind="foreach: Tags">
                    <li>
                        <span class="box1">
                            <input type="text" data-bind="value: Name, ko_autocomplete: { source: $parent.tagSource() }" />
                            <a class="float-right" href="#" data-bind="click: $parent.removeTag">
                                <span class="icon-remove"></span>
                            </a>
                        </span>
                    </li>
                </ul>
                <a href="#" data-bind="click: addTag" class="button">Add</a>
            </div>
        </div>
    </div>
</section>

@section footer {
    <!-- load the Aloha Editor core and some plugins -->
    
    <script type="text/javascript" src="~/Scripts/jquery-ui-1.9.2.autocomplete.min.js"></script>
    <script type="text/javascript" src="~/Scripts/knockout-2.2.0.js"></script>
    <script type="text/javascript" src="~/Scripts/knockout.mapping-latest.js"></script>
    <script type="text/javascript" src="http://cdn.aloha-editor.org/latest/lib/require.js"></script>
    <script src="http://cdn.aloha-editor.org/latest/lib/aloha.js"
                        data-aloha-plugins="common/ui,
                                            common/format,
                                            common/list,
                                            common/link,
                                            common/highlighteditables,
                                            common/image,
                                            common/align,
                                            common/table
                                            ">
    </script>
    <script type="text/javascript">
        (function($) {
            ko.bindingHandlers.ko_autocomplete = {
                init: function (element, params) {
                    $(element).autocomplete(params());
                },
                update: function (element, params) {
                    $(element).autocomplete("option", "source", params().source);
                }
            };

            ko.bindingHandlers.draganddrop = {
                init: function (element, params) {
                    element.ondragover = function () {
                        $(this).addClass('hover');
                        return false;
                    };

                    element.ondrop = function (e) {
                        $(this).removeClass('hover');
                        e.preventDefault();
                        var file = e.dataTransfer.files[0],
                            reader = new FileReader();

                        reader.onload = function (readerEvent) {
                            var extension = readerEvent.target.result.match(/data:image\/([a-z]+);base64.*/i)[1];

                            $.post("/Api/Images/", { Id: 0, Image: readerEvent.target.result.replace('data:image/' + extension + ';base64,', '') }, function (data) {
                                params()('/Api/Images/' + data.Id + '.' + extension);
                            });
                        };
                        reader.readAsDataURL(file);

                        return false;
                    };
                }
            };

            var ArticleEditViewModel = function (model) {
                var self = ko.mapping.fromJS(model);

                self.SelectStates = @Html.Raw(Json.Encode(ViewBag.States))
                self.SelectTags = @Helpers.JsonSerialize(ViewBag.Tags, this)

                self.addState = function() {
                    self.States.push({ Id: 0, StateId: 0 });
                };

                self.removeState = function(state) {
                    self.States.remove(state);
                };

                self.addTag = function() {
                    self.Tags.push({ Name: "", Id: 0, Articles: [] });
                };

                self.removeTag = function(tag) {
                    self.Tags.remove(tag);
                };

                self.tagSource = ko.computed(function() {
                    return ko.utils.arrayMap(self.SelectTags, function(item) {
                        return item.Name;
                    });
                });

                self.save = function() {
                    self.Published = false;

                    self.Content(escape($('.editable').html()));
                    self.DatePublished = '';

                    ko.utils.postJson("@Url.RouteUrl("Admin_default", new { @controller = "Article", @action = "Edit" })", { article: ko.mapping.toJS(self) });
                };

                self.publish = function () {
                    self.Published = false;

                    self.Content(escape($('.editable').html()));
                    self.DatePublished = '';

                    ko.utils.postJson("@Url.RouteUrl("Admin_default", new { @controller = "Article", @action = "Publish" })", { article: ko.mapping.toJS(self) });
                };

                return self;
            }

            Aloha.ready(function() {
                Aloha.bind('aloha-editable-created', function (e, args) {
                    args.obj.bind('drop', function (event) {
                        var e = event.originalEvent;
                        e.preventDefault();

                        var file = e.dataTransfer.files[0],
                            reader = new FileReader();

                        reader.onload = function (readerEvent) {
                            var img = $('<img src="" alt="xyz" />');
                            var extension = readerEvent.target.result.match(/data:image\/([a-z]+);base64.*/i)[1];

                            $.post("/Api/Images/", { Id: 0, Image: readerEvent.target.result.replace('data:image/'+extension+';base64,', '') }, function(data) {
                                img.attr('src', '/Api/Images/'+data.Id+'.'+extension);
                                Aloha.Markup.insertHTMLCode(img.get(0).outerHTML);
                            });

                        };

                        reader.readAsDataURL(file);
                        return false;
                    });
                });

                Aloha.jQuery('.editable').aloha();
            });

            var viewModel = new ArticleEditViewModel(@Helpers.JsonSerialize(Model, this))
            ko.applyBindings(viewModel);
        })(jQuery);
    </script>
}